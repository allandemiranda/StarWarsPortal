{"version":3,"sources":["views/Film/components/FilmInfo/FilmInfo.js","views/Film/Film.js"],"names":["useStyles","makeStyles","theme","root","content","padding","actions","flexDirection","alignItems","marginLeft","buttonIcon","marginRight","spacing","FilmInfo","props","film","className","rest","classes","useState","progress","setProgress","useEffect","CircularProgress","Card","clsx","CardHeader","title","Divider","CardContent","Table","TableBody","TableRow","selected","TableCell","episode_id","director","opening_crawl","producer","release_date","tabs","marginTop","divider","backgroundColor","colors","grey","Film","match","history","params","id","tab","value","label","to","find","t","setFilm","error","setError","mounted","axios","get","then","response","data","catch","subTitle","Tabs","onChange","event","push","scrollButtons","variant","map","Tab","component","message"],"mappings":"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","file":"static/js/9.f8c21bb6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell\n} from '@material-ui/core';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  actions: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    '& > * + *': {\n      marginLeft: 0\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst FilmInfo = props => {\n  const { film, className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [progress, setProgress] = useState(true);\n\n  useEffect(()=>{\n    if(film){\n      setProgress(false)\n    }\n  },[film])\n\n  return (\n    <div>\n      {progress ? <CircularProgress/> : \n        <Card\n          {...rest}\n          className={clsx(classes.root, className)}\n        >\n          <CardHeader \n            \n            title=\"Vehicle info\" \n          />\n          <Divider />\n          <CardContent className={classes.content}>\n            <Table>\n              <TableBody>            \n                <TableRow selected >\n                  <TableCell>Episode</TableCell>\n                  <TableCell>{film.episode_id}</TableCell>\n                </TableRow>\n                <TableRow >\n                  <TableCell>Director</TableCell>\n                  <TableCell>{film.director}</TableCell>\n                </TableRow>\n                <TableRow selected >\n                  <TableCell>Opening Crawl</TableCell>\n                  <TableCell>{film.opening_crawl}</TableCell>\n                </TableRow>\n                <TableRow >\n                  <TableCell>Producer</TableCell>\n                  <TableCell>{film.producer}</TableCell>\n                </TableRow>\n                <TableRow selected >\n                  <TableCell>Release Date</TableCell>\n                  <TableCell>{film.release_date}</TableCell>\n                </TableRow>                                \n              </TableBody>\n            </Table>\n          </CardContent>   \n        </Card>}\n    </div>\n  );\n};\n\nFilmInfo.propTypes = {\n  className: PropTypes.string,\n  film: PropTypes.object.isRequired,  \n};\n\nexport default FilmInfo;\n","/**\n * @description Film details\n * \n * @author Allan de Miranda\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Tabs, Tab, Divider, colors } from '@material-ui/core';\nimport axios from 'utils/axios';\nimport { \n  Page, \n  Header, \n  Summary, \n  Characters, \n  Planets,\n  Alert,\n  Species,\n  Starships,\n  Vehicles\n} from 'components';\nimport { FilmInfo } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)     \n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst Film = props => {\n  const { match, history } = props;\n  const classes = useStyles();\n  const { id, tab } = match.params;\n\n  const handleTabsChange = (event, value) => {\n    history.push(value);\n  };\n\n  const tabs = [\n    { value: 'summary', label: 'Summary' },\n    { value: 'characters', label: 'Characters' },\n    { value: 'planets', label: 'Planets'},\n    { value: 'species', label: 'Species'},\n    { value: 'starships', label: 'Starships'},\n    { value: 'vehicles', label: 'Vehicles'}\n  ];\n\n  if (!tab) {\n    return <Redirect to={`/film/${id}/summary`} />;\n  }\n\n  if (!tabs.find(t => t.value === tab)) {\n    return <Redirect to=\"/errors/error-404\" />;\n  }\n\n  const [film, setFilm] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchFilm = () => {\n      axios.get('/films/'+ id +'/').then(response => {\n        if (mounted) {\n          setFilm(response.data); \n        }\n      }).catch((error)=>{\n        setError(error)\n      });\n    };\n\n    fetchFilm();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  if (!film) {\n    if(error){\n      return (\n        <Page\n          className={classes.root}\n          title=\"Film Details\"\n        >\n          <Alert\n            message={error.message}\n            variant={'error'}\n          />\n        </Page>);\n    } else {\n      return null;\n    }\n  }\n\n  return (      \n    <Page\n      className={classes.root}\n      title=\"Film Details\"\n    >\n      <Header \n        subTitle={'Film'}\n        title={film.title} \n      />\n      <Tabs\n        className={classes.tabs}\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        value={tab}\n        variant=\"scrollable\"\n      >\n        {tabs.map(tab => (\n          <Tab\n            key={tab.value}\n            label={tab.label}\n            value={tab.value}\n          />\n        ))}\n      </Tabs>\n      <Divider className={classes.divider} />\n      <div className={classes.content}>\n        {tab === 'summary' && \n        <Summary \n          component={<FilmInfo film={film} />}\n        />}\n        {tab === 'characters' && \n        <Characters \n          data={film} \n          title={'Film Characters'} \n        />}\n        {tab === 'planets' && \n        <Planets \n          data={film}\n          title={'Film Planets'}\n        />}  \n        {tab === 'species' && \n        <Species \n          data={film}\n          title={'Film Species'}\n        />}   \n        {tab === 'starships' && \n        <Starships \n          data={film}\n          title={'Film Starships'}\n        />}  \n        {tab === 'vehicles' && \n        <Vehicles \n          data={film}\n          title={'Film Vehicles'}\n        />}      \n      </div>\n    </Page>\n  );\n};\n\nFilm.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n};\n\nexport default Film;\n"],"sourceRoot":""}